LLVM IR: Intermediate Representation
https://llvm.org/docs/LangRef.html

Basics
-	SSA based representation (single static assignment)
-	Three different froms of IR
	=	In-memory, when IR is represented as data structures during pass and such
	=	On-disk bitcode, a representation suitable for loading into a JIT compiler
	=	Human readable, for visual inspection and FileCheck
-	Aims to be a "universal IR" such that IR optimizations can map to the target

Identifers
-	Two basic type global and local
-	Global identifiers begin with `@` and cover functions and global variables
-	Local identifiers begin with `%` and cover registers names and types
-	Three identifier formats: named, unnamed, constants
	=	Named identifiers are represented as a string of characters
	=	Unnamed identifiers are represented as a unsigned numeric values
	=	Constants have their own syntax covered later
-	Prefixing values is important to prevent name collisions with keywords

Module Structure
-	LLVM programs are composed of modules
-	Each module corresponds to a translation unit
-	Modules are combined together using LLVM linker
-	A module is generally list of global values
	=	The global values are represented by a pointer to a memory location and have a linkage type

Linkage Types
-	Specifiers on global variables informing the linker on how to treat the variable
-	`private`, means the value is only accessible within the current module
	=	Private symbols do not appear in the resulting object file's symbol table
-	`internal`, similar to `private` but value appears as a local symbol in the object file
	=	Corresponds to `static` C keyword
-	`available_externally`, the value does not appear in the object file
	=	Equivalent to an `extern` declaration
	=	Allows for inlining and other optimizations
-	`linkonce`, values are merged with other globals of the same name during linking
-	`weak`, similar to `linkonce` but unreferenced globals with `weak` are not discarded
-	`common`, similar to `weak` but are used for global scope declarations
	=	`common` values are default 0 initialized and may not be marked constant
-	`appending`, only apply to pointer to array types where two arrays are appended together
-	`extern_weak`, the symbol is `weak` until linked, and if not linked it becomes null
-	`linkonce_odr` and `weak_odr`, indicate a symbol may only be merged with equivalent symbols
-	`external`, the global value is externally linkable to other modules

Calling Conventions
-	`ccc`, C calling convention (default)
	=	Supports varargs, tolerates some differences in prototype and definition
-	`fastcc`, attempts to make the call as fast as possible
	=	Allows non conformance to ABI specification
	=	Prototype must match definition, does not support varargs
-	`coldcc`, attempts to make code in caller as efficient as possible
	=	Operates under the assumption that the calls are infrequent
	=	Inliner does not consider `coldcc` calls for inlining
-	`cc 10`, implemented specifically for Glasgow Haskell Compiler
-	`cc 11`, implemented specifically for High-Performance Erlang Compiler
-	`webkit_jscc`, WebKit's JavaScript calling convention
-	`anyregcc`, forces call arguments in to registers but allows them to be dynamically allocated
-	`preserve_mostcc`, behaves like `ccc` but uses a different set of registers
	=	For functions which have a "hot" and "cold" path to the function call
-	`preserve_allcc`, behaves like `ccc` but uses a different set of registers
	=	For functions that don't need to call other functions
-	`cxx_fast_tlscc`, aims to minimize caller overhead by preserving as many registers as possible
-	`swiftcc`, Swift language calling convention
-	`tailcc`, enables tail callable convention
	=	ensures tail calls will always be tail call optimized
-	`cfguard_checkcc`, Windows Control Flow Guard

Visibility Styles
-	All global variables and functions have one visibility style
-	`default`, declaration is visible in the ELF object file
-	`hidden`, indicates the symbol will not be placed into the dynamic symbol table
-	`protected`, in ELF, the symbol will be placed in the dynamic symbol table
	=	Local references will bind to the local symbol

DLL Storage Classes
-	`dllimport`, compiler to reference symbol via a global pointer to a pointer exported by a DLL
-	`dllexport`, copmiler to provide a global pointer to a pointer in a DLL

Thread Local Storage Models
-	`localdynammic`, variables used exclusively in a shared library
-	`initialexec`, variables in modules loaded dynamically
-	`localexec`, variables defined and only used within an executable
-	Model corresponds to ELF thread local storage

Runtime Preemption Specifiers
-	Global values may have a runtime preemption specifier
-	`dso_preemptable`, global value may be replaced by a outside linkage at runtime
-	`dso_local`, global value will resolve to a symbol within the linkage unit
-	Defaults to `dso_preemptable`

Struct Types
-	LLVM IR allows for specification of structs as both `literal` and `identified`
-	`literal`, structs have the types of members explicitly stated
-	`identified`, struct type have a name for the struct type

Global Variables
-	Define/allocate regions of memory at compile time
	=	All global variable definitions must be initialized
	=	Global variables may be declared without an initializer
-	Globals may be `constant` (allowing optimization), but must be initialized
-	Globals may be marked `unnamed_addr` indicating the value is important not the address
-	Globals may be marked `local_unnamed_addr` the address is not significant in the module
-	Global initializers are assumed to not be modified, this can be discard with `externally_initialized`
-	Alignment of globals must be a power of 2 and can be specified (0 by default)

Functions
-	Function definitions begin with `define` keyword followed by optional specifiers
-	Function declarations begin with the `declare` keyword followed by optional specifiers
-	Functions consist of basic blocks forming the CFG of the function
	=	First basic block to function may not have predecessor blocks and thus no PHI nodes

Aliases
-	Do not create new data
	=	Aliases are new symbols for existing positions

IFuncs
-	Do not create new data
	=	IFuncs are new symbols resolved by a dynamic linker at runtime

Parameter Attributes
-	Function return type and parameters may have an associated parameter attribute
-	`zeroext`, zero extend the param/return
-	`signext`, sign extend the param/return
-	`inreg`, treat param/return in a target-dependant way
-	`byval`, indicates pointer param should be passed by value
-	`inalloca`, allows caller to take address of outgoing stack arg
	=	`inalloca` arg must be a pointer to stack mem created through an `alloca` inst
	=	Argument will be passed by memory
-	`sret`, indicates pointer param is the address of struct return value
-	`align`, indicates the pointer alignment which may be assumed
-	`noalias`, indicates no overlap in pointers' data
-	`nocapture`, callee can not copy the pointer such that the copy outlives the function
-	`nofree`, callee can not free the pointer
-	`nest`, indicates pointer may be excised
-	`returned`, indicates function returns the argument as its return value
-	`nonull`, indicates parameter or return pointer is not null
-	`dereferenceable`, indicates param/return may be dereferenced
-	`dereferenceable_or_null`, indicates param/return is not both non-null and non-dereferenceable
-	`swiftself`, indicates parameter is the object context parameter
-	`swifterror`, used for optimizing Swift error handling
-	`immarg`, indicates parameter is an immediate value
