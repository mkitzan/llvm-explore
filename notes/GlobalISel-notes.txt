GlobalISel

**Could future proof RegBankSelect::Mode check at RegBankSelect::assignInstr ~L628
**Possibly collapse MF call check in InstructionSelect::runOnMachineFunction ~L230 into redundant copy pass loop ~L153
**Could InstructionSelector::select be implemented such that subclass only implements hooks?

References
-	https://www.youtube.com/watch?v=6tfb344A7w8 "Global Instruction Selection Status"
-	https://www.youtube.com/watch?v=8427bl_7k1g "Generating Optimized Code with GlobalISel"
-	https://www.youtube.com/watch?v=Zh4R40ZyJ2k "Tutorial: GlobalISel"

Architecture
-	Organized as a set of four MachineFunctionPass subclasses
	=	IRTranslator -> Legalizer -> RegisterBankSelector -> InstructionSelector
-	High-level pipeline
	=	Convert LLVM IR to gMIR and perform target ABI lowering
	=	Replace illegal gMIR instructions with target legal instructions
	=	Choose register banks for each virtual register
	=	Select target instructions converting gMIR to MIR
-	AArch64 implemented to support GlobalISel (ref to find concrete examples of client usage)
-	TargetPassConfig used to construct the entire GlobalISel pipeline
	=	TargetMachine subclasses TargetPassConfig, so TargetMachine constructs GlobalISel pipeline

MachineIRBuilder
-	Helper class to build MachineInstr
-	Helper class for MachineIRBuilder called MachineIRBuilderState
	=	Maintains insertion point, machine function, TargetInstrInfo, and MachineRegisterInfo
	=	Allows MachineIRBuilder to handle MachineInstr construction, insertion, and verification
	=	Struct object can be transferred between different MachineIRBuilders

IRTranslator
-	Takes LLVM IR and converts it into Generic IR (gMIR)
-	Core entry: IRTranslator::runOnMachineFunction ~L2205
-	Implements hooks for compiler for translating instrs of form IRTranslator::translate*
-	Uses CallLowering from the Target for ABI lowering
	=	Invokes: lowerFormalArguments, lowerCall, and lowerReturn
-	lowerFormalArguments
	=	Converts MachineFunction argument capture to be ABI compliant MIR
		-=	Lowering performed per-MachineFunction in IRTranslator::runOnMachineFunction ~L2290
	=	Takes MIRBuilder, Function, and VRegs 
		-=	MIRBuilder is used to construct MIR into the MachineFunction being translated
		-=	Function is the IR function to lower to gMIR
		-=	VRegs are the virtual registers to lower arguments into (as described by ABI)
-	lowerCall
	=	Converts call site argument passing to be ABI compliant MIR
		-=	Lowering performed per-call instr in IRTranslator::translateCallSite ~L1544
		-=	IRTranslator::translateCallSite invoked in translateCall ~L1604 and translateInvoke ~L1695
	=	Takes MIRBuilder, CallSite (CS), ResRegs, ArgRegs, SwiftErrorVReg, and GetCalleeReg
		-=	MIRBuilder is used to construct MIR into the MachineFunction being translated
		-=	CS is the call/invoke instruction
		-=	ResRegs are the registers where the return value should be stored
		-=	ArgRegs are the virtual registers containing the arguments passed
		-=	SwiftErrorVReg is non-zero if the call has a swifterror inout parameter
		-=	GetCalleeReg is a hook to acquire a register if the target cannot determine the destination to jump
-	lowerReturn
	=	Converts return instr to be ABI compliant MIR
		-	Lowering performed per return instr in IRTranslator::translateRet ~L381
	=	Takes MIRBuilder, Value, VRegs, and SwiftErrorVReg
		-=	MIRBuilder is used to construct MIR into the MachineFunction being translated
		-=	Value is the value expected to be returned
		-=	VRegs are the virtual registers where the value is stored
		-=	SwiftErrorVReg is non-zero if the call has a swifterror inout parameter
-	Aggregate handling
	=	Represents aggregate types (struct) within a single VReg
	=	TODO[circa 2016] implement method of expressing unused bits in the VReg
-	Constant handling
	=	Constants are defined through G_CONSTANT gMIR instr at entry block
	=	Means constants will exist inside a VReg rather than as an immediate operand to gMIR instrs (besides G_CONSTANT)
	=	Placing constants in VRegs immediately pressures register file by having registers with long lifespan
	=	TODO[circa 2016] implement method of pushing constant defs down in the function

Generic Machine Instructions
-	Prefixed by "G_"
-	Virtual registers are typed
	=	Scalar, s#bit
	=	Vector, <#lane x s#bit>
	=	Pointer, p#addrspace
-	Virtual registers may not have a register class
	=	Represented through an underscore ahead of VReg type

Legalizer
-	Replaces unsupported operations with supported operations
-	Composed of three core components
	=	Legalizer MachineFunctionPass
		-=	Performs the iterative legalization process over a MachineFunction
		-=	Only performs legalization on gMIR instructions Legalizer::runOnMachineFunction ~L170
		-=	Call on LegalizerHelper to legalize gMIR instr occurs at Legalizer::runOnMachineFunction ~L229
		-=	When an instr can't immediately be legalized it is stored in RetryList
			==	Further iterations may produce artifacts allowing un-legalizable instr to cut anyway
			==	Legalization retry logic occurs at Legalizer::runOnMachineFunction ~L232 and ~L248-284
	=	LegalizerInfo defined by the Target used by Legalizer
		-=	Defines which instrs the Target can select and how unselectable instrs should be expanded
		-=	Legalization actions are built by Target through LegalizerInfo::getActionDefinitionsBuilder ~L425
			==	Returns a LegalizeRuleSet which the target modifies to define its legalization rules
	=	LegalizerHelper Target independent used by LegalizerInfo and Legalizer
		-=	Implements the common legalization actions
		-=	Core legalization entry point is LegalizerHelper::legalizeInstrStep ~L83
			==	Legalization actions: Legal, NarrowScalar, WidenScalar, FewerElements, MoreElements, or Custom
-	No illegal types only illegal operations on provided types
-	Check usage of types in an operation against the set of actions
	=	If action of the type's usage is Legal, do nothing
	=	If action of the type's usage is not Legal, perform legalization action specified

RegisterBankSelector
-	Binds generic virtual registers to a register bank
-	Can optimize register bank assignment to improve locality of register usage
-	Class RegisterBank is used to describe what register banks cover what TargetRegisterClass
-	Composed of two core components
	=	RegBankSelect MachineFunctionPass
		-=	Core entry point RegBankSelect::runOnMachineFunction ~L651
		-=	Bank assignment per instr invoked at RegBankSelect::runOnMachineFunction ~L695
		-=	RegBankSelect::assignInstr ~L622 calls helpers to find a mapping (or best mapping)
			==	Call chain goes deep into RegBankSelect for best mapping
	=	RegisterBankInfo defined by the Target used by RegBankSelect
		-=	Defines mappings of RegisterClass to RegisterBanks
		-=	Defines cross register bank copies
		-=	Provides built-in hooks for computing register bank instruction mapping and getting info

InstructionSelector
-	Select target instructions: translates gMIR to MIR
-	Traverses blocks bottom up
-	Eliminates dead code
-	Target implements InstructionSelector class defining how to select an opcode for a gMIR opcode
-	Composed of two components
	=	InstructionSelect MachineFunctionPass
		-=	Core entry point InstructionSelect::runOnMachineFunction ~L66
		-=	Calls core select function at InstructionSelect::runOnMachineFunction ~L135
		-=	After selection, a second pass runs eliminating redundant copies
			==	If a copy occurs between the same register class, replace copy dest with copy src
	=	InstructionSelector defined by Target used by InstructionSelect
		-=	Core select function is pure virtual -> Target must implement the whole thing
		-=	Built-in machine operand and machine register check functions

Combiner
-	Pass which applies combine rules to transform a pattern into a more desirable sequence of instructions
-	GlobalISel Combiner composed of three components
	=	Combiner
		-=	Core entry point Combiner::combineMachineInstrs ~L98
		-=	First loop Combiner::combineMachineInstrs ~L132 creates reverse post order traversal of MachineInstrs
		-=	Second loop Combiner::combineMachineInstrs ~L149 attempts to combine each MachineInstr
		-=	If a combine occurred, repeat
	=	CombinerInfo
		-=	Target specified which operations to combine and how to combine them
		-=	Class which combines are delegated to by Combiner
		-=	Core function is CombinerInfo::combine ~L67
			==	Attempts to perform a combine with the given MachineInstr as a root
			==	Pure virtual function, Target must implement
			==	Generally involves a Target specific CombinerHelper
			==	By default only combines COPY, but with optimization turned on will try all combines
	=	CombinerHelper
		-=	Contains a set of built-in combination functions
		-=	Has CombinerHelper::tryCombine ~L1298 which attempts all combinations
