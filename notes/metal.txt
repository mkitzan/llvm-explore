Using Metal and Metal Shading Language
https://developer.apple.com/documentation/metal/basic_tasks_and_concepts/performing_calculations_on_a_gpu
https://developer.apple.com/documentation/metal/basic_tasks_and_concepts/using_metal_to_draw_a_view_s_contents
https://developer.apple.com/documentation/metal/using_a_render_pipeline_to_render_primitives

MSL
-	MSL is a C++ variant
-	.metal file extension
-	Xcode builds Metal shaders into a default library embedded in app
-	`kernel` function specifier keyword
	=	Declares a function is public, which means app can be called
		-=	Public functions may not be called by other shader functions
	=	Declares a function is a compute function
		-=	Compute functions perform parallel calculations using a thread grid
-	`device` pointer address space specifier keyword
	=	Declares that a pointer points to `device` address space
		-=	`device` address space is persistent read / write memory
	=	All pointers must have a pointer address space specifier
-	`[[thread_position_in_grid]]` argument attribute keyword
	=	Provides the function the index in the thread grid of the executing thread
	=	Different usage from C++ attribute specifier
	=	Used in from `uint index [[thread_position_in_grid]]`

Basic Metal in Objective-C
-	App needs an `MTLDevice` which is an abstraction of the GPU
	=	`MTLDevice` is used to create GPU resources
	=	Mac platforms may have multiple GPUs
		-=	`MTLCreateSystemDefaultDevice` gets the default GPU on the platform
-	To use a GPU function, must get a `MTLLibrary` object from `MTLDevice`
	=	Can then ask the `MTLLibrary` object for specific `MTLFunction` object
	=	`MTLFunction` represents a specific shader function from the queried library
	=	`MTLFunction` is converted to executable code by creating a pipeline
-	Pipelines specify a task / data for the GPU to perform / perform on
	=	Metal pipelines are represented as "pipeline state objects"
	=	A compute pipeline are captured in `MTLComputePipelineState`
	=	A compute pipeline executes a single compute function (or `kernel`)
		-=	May manipulate input data before running and the output data before ending
	=	Creating a pipeline state object requires finishing compilation of the `kernel`
		-=	For performance, ensure this is asynchronous
-	`MTLCommandQueue` is used to send tasks to the GPU
	=	Command queues are created from `MTLDevice` objects
-	GPU memory are represented with `MTLResource` objects
	=	`MTLResource` objects may be have different storage modes
		-=	Storage modes denote whether data is owned by GPU or shared with OS
	=	`MTLBuffer` is a memory allocation without a predefined format
		-=	Format of the buffer is specified on use through OpenGL-like VertexArrayAttribs
-	`MTLCommandBuffer` object stores an encoded GPU task
	=	`MTLCommandBuffer` are created from `MTLCommandQueue` objects
	=	An `MTLCommandBuffer` can only be used with the `MTLCommandQueue` which created it
-	A command encoder is used to encode a pipeline state object with arguments into a command buffer
	=	Different command encoders depending on GPU task
		-=	`MTLComputeCommandEncoder` is used for compute workloads
	=	Command encoder functions are used to set the pipeline state object
	=	Command encoder functions are used to bind buffers to specific function parameters
		-=	Can also define offsets into buffers to use a single buffer for multiple parameters
	=	Command encoder functions are used to encode thread group and workload size information
	=	Once all information has been provided, app invokes `endEncoding` function
-	Once a encoding is completed, the app commits the task to the `MTLCommandBuffer`
	=	Committing a task causes Metal to asynchronously prepare and execute the task on the GPU
	=	On task completion, Metal marks the command buffer as complete
-	On completion of the task, the output `MTLBuffer` object will have results
	=	The pointer to the `MTLBuffer` object can be used to read the output

Creating and Rendering a MetalKit View
-	MetalKit handles windows, texture loading, and 3d models
-	`MTKView` handles drawing to the screen
	=	`MTKView` subclasses `NSView` on macOS and `UIView` on iOS and tvOS
	=	`MTKView` requires a Metal device	
	=	`clearColor` member denotes the background color
		-=	Use `MTLClearColorMake(R{float}, G{float}, B{float}, Alpha{float})
	=	If view is unanimated, `enableSetNeedsDisplay` only draws when content needs updating
-	`MTKView` uses a delegate renderer to inform app when rendering is required
	=	Delegate implements two important callbacks
		-=	`drawableSizeWillChange` and `drawInMTKView`
		-=	`drawableSizeWillChange` is used for resizing the view
		-=	`drawInMTKView` renders using a command buffer and encoded commands
-	A render pass is a sequence of commands used to draw to the screen
	=	Rendering draws to a set of textures
	=	`MTLRenderPassDescriptor` is used to create a render pass
	=	Render pass descriptor describes a set of render targets
	=	Render pass is created with a `MTLRenderCommandEncoder`
		-=	Obtained by calling `renderCommandEncoderWithDescriptor` on an `MTLRenderPassDescriptor`
-	Drawing to screen requires a texture which is a "drawable object"
	=	`MTKView` creates drawable objects for textures it manages
	=	The render pass texture target's drawable object can be obtained with `currentDrawable`
	=	To schedule the texture for rendering call `presentDrawable` on the command buffer
		-=	Pass the drawable object to `presentDrawable`
	=	`presentDrawable` will schedule the drawable to be rendered alongside other visual updates
	=	`commit` the command buffer to launch the task

Rendering Primitives with Metal
-	Metal render pipeline models the graphics pipeline
-	Inputs to pipeline stages are provided by app or preceding pipeline stages
-	Can use `simd/simd.h` library to use SIMD types like `vector_float2`
-	`vertex` function specifier keyword declares a function as a vertex shader
-	`[[vertex_id]]` argument attribute tells Metal to pass an index to the vertex for the executing thread
-	`[[buffer(n)]]` argument qualifier tells Metal what buffer index offsets to use
	=	Without `[[buffer(n)]]`, Metal assigns the slot automatically
-	`fragment` function specific keyword declares a function as a fragment shader
-	`[[stage_in]]` argument qualifier declares the argument is the result of the previous pipeline stage
-	Create a `MTLRenderPipelineState` to bind a render pipeline
-	Create a `MTLRenderPipelineDescriptor` to configure a render pipeline with specific shader functions
	=	App binds `vertexFunction` and `fragmentFunction` to `MTLRenderPipelineDescriptor`
	=	App also specifies the pixel format with `MTLPixelFormat`
		-=	 This defines the memory layout of pixels
		-=	In example, the `MTKView` provides the pixel format
-	Must set the `MTLViewport` in the encoder to tell Metal how big the viewport is
	=	Use encoder's `setViewport` function
-	Can transfer small amounts of data to Metal without a `MTLBuffer`
	=	Do so by copying data into command buffer
	=	Use encoder's `setVertexBytes` function to bind vertex and viewport data
	=	The data will be mapped to the specified arguments of the vertex shader
-	Tell the encoder the primitive to render with `drawPrimitives` function
	=	`MTLPrimitiveTypeTriangle` takes two arguments `vertexStart` and `vertexCount`
		-=	`vertexStart` indicates the starting index in the provided data
		-=	`vertexCount` indicates the number of vertices
-	Encoding may then be ended and committed to begin rendering
